sidebarLayout(
sidebarPanel(
sliderInput("clusters", "Number of clusters:", min = 2, max = 4, value = 2),
br(),
actionButton("clusterButton", "Cluster Data")
),
mainPanel(
plotOutput("plot_cluster"),
dataTableOutput("table_cluster")
)
)
),
tabPanel("Association Rule Mining",
sidebarLayout(
sidebarPanel(
textInput("support", "Enter the support value (between 0.001 and 1):", ""),
textInput("confidence", "Enter the confidence value (between 0.001 and 1):", ""),
actionButton("runButton", "Run Apriori")
),
mainPanel(
verbatimTextOutput("aprioriOutput")
)
)
)
)
)
server <- function(input, output) {
observeEvent(input$runButton, {
support <- as.numeric(input$support)
confidence <- as.numeric(input$confidence)
if (is.na(support) || support < 0.001 || support > 1 || is.na(confidence) || confidence < 0.001 || confidence > 1) {
output$aprioriOutput <- renderPrint({
"Invalid input. Please enter support and confidence values between 0.001 and 1."
})
} else {
Data_association <- read.transactions(textConnection(Data_Cleaning2$items) , sep=",")
Data_apriori<- apriori( Data_association , parameter = list( supp= support , conf= confidence , minlen=2 ) )
if(length(Data_apriori) == 0){
output$aprioriOutput <- renderPrint({
"NO association rules found. "
})
}else if(length(Data_apriori)!= 0 ){
output$aprioriOutput <- renderPrint({
inspect(Data_apriori)
})
}
}
})
cleaned_data <- reactive({
req(input$file)
Data <- read.csv(input$file$datapath)
Data_Cleaning1 <- distinct(Data)
outlier_indices <- boxplot(Data_Cleaning1$count)$out
Data_Cleaning2 <- Data_Cleaning1[!Data_Cleaning1$count %in% outlier_indices, ]
Data_Cleaning2
})
output$cleaned_summary <- renderPrint({
summary(cleaned_data())
})
output$boxplots <- renderPlot({
boxplot(cleaned_data()[2:4])
})
output$plot <- renderPlot({
plot_type <- input$plotType
if (plot_type == "Comparing cash and credit totals") {
x <- table(cleaned_data()$paymentType)
percentage <- paste0(round((x / sum(x)) * 100, 2), "%")
pie(x, main = "Cash vs Credit", labels = percentage, col = c("pink", "lightblue"))
legend("bottomright", legend = c("Cash", "Credit"), fill = c("pink", "lightblue"))
} else if (plot_type == "Comparing each age and sum of total spending") {
total_spending_by_age <- cleaned_data() %>%
group_by(age) %>%
summarise(totalA = sum(total)) %>%
arrange(desc(totalA))
barplot(
height = total_spending_by_age$totalA,
names.arg = total_spending_by_age$age,
col = "skyblue",
main = "Total spending vs Ages",
xlab = "Age",
ylab = "Total Spending"
)
} else if (plot_type == "Show Total city spending") {
total_spending_by_city <- cleaned_data() %>%
group_by(city) %>%
summarise(totalC = sum(total)) %>%
arrange(desc(totalC))
plot(reorder(total_spending_by_city$city, -total_spending_by_city$totalC),
total_spending_by_city$totalC,
xlab = "City",
ylab = "Spending",
main = "Total spending for each city")
} else if (plot_type == "The distribution of total spending") {
boxplot(cleaned_data()$total, main = "The distribution of total spending", xlab = "Total spending")
} else if (plot_type == "Dashboard") {
par(mfrow=c(2,2))
install.packages("tidyverse")
library(ggplot2)
x <- table(cleaned_data()$paymentType)
percentage <- paste0(round((x / sum(x)) * 100, 2), "%")
pie(x ,main="Cash vs Credit",labels=percentage,col=c("pink","lightblue"))
legend("bottomright", legend = c("Cash", "Credit"), fill = c("pink","lightblue"))
total_spending_by_age <- cleaned_data() %>%
group_by(age) %>%
summarise(totalA = sum(total)) %>%
arrange(desc(totalA))
barplot(
height = total_spending_by_age$totalA,
names.arg = total_spending_by_age$age,
col = "skyblue",
main = "Total spending vs Ages",
xlab = "Age",
ylab = "Total Spending"
)
total_spending_by_city <- cleaned_data() %>%
group_by(city) %>%
summarise(totalC = sum(total)) %>%
arrange(desc(totalC))
plot(reorder(total_spending_by_city$city, -total_spending_by_city$totalC),
total_spending_by_city$totalC,
xlab = "City",
ylab = "Spending",
main = "Total spending for each city")
boxplot(cleaned_data()$total, main="The distribution of total spending", xlab="Total spending")
}
})
clusteredData <- reactive({
req(input$clusterButton)
Data_Scaled <- c(scale(Data_Cleaning2$total), scale(Data_Cleaning2$age))
k <- kmeans(Data_Scaled, centers = input$clusters)
Data_with_clusters <- data.frame(name = Data_Cleaning2$customer,
age = Data_Cleaning2$age,
total = Data_Cleaning2$total,
cluster = k$cluster)
return(Data_with_clusters)
})
output$plot_cluster <- renderPlot({
plot(clusteredData()$total, clusteredData()$age, col = clusteredData()$cluster, pch = 19, main = "Data Clustering")
points(clusteredData()$total, clusteredData()$age, col = clusteredData()$cluster, pch = 19)
legend("topright", legend = paste("Cluster", unique(clusteredData()$cluster)), col = unique(clusteredData()$cluster), pch = 19)
})
output$table_cluster <- renderDataTable({
clusteredData()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library("readxl")
library(reader)
library("arules")
library(tidyverse)
library(dplyr)
library(ggplot2)
ui <- fluidPage(
titlePanel("Data science project - Team 79"),
tabsetPanel(
tabPanel("Data Cleaning",
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
verbatimTextOutput("cleaned_summary")
),
mainPanel(
plotOutput("boxplots")
)
)
),
tabPanel("Visualization",
sidebarLayout(
sidebarPanel(
selectInput("plotType", "Select Plot Type",
choices = c("Comparing cash and credit totals",
"Comparing each age and sum of total spending",
"Show Total city spending",
"The distribution of total spending",
"Dashboard"))
),
mainPanel(
plotOutput("plot")
)
)
),
tabPanel("Data Clustering Visualization",
sidebarLayout(
sidebarPanel(
sliderInput("clusters", "Number of clusters:", min = 2, max = 4, value = 2),
br(),
actionButton("clusterButton", "Cluster Data")
),
mainPanel(
plotOutput("plot_cluster"),
dataTableOutput("table_cluster")
)
)
),
tabPanel("Association Rule Mining",
sidebarLayout(
sidebarPanel(
textInput("support", "Enter the support value (between 0.001 and 1):", ""),
textInput("confidence", "Enter the confidence value (between 0.001 and 1):", ""),
actionButton("runButton", "Run Apriori")
),
mainPanel(
verbatimTextOutput("aprioriOutput")
)
)
)
)
)
server <- function(input, output) {
observeEvent(input$runButton, {
support <- as.numeric(input$support)
confidence <- as.numeric(input$confidence)
if (is.na(support) || support < 0.001 || support > 1 || is.na(confidence) || confidence < 0.001 || confidence > 1) {
output$aprioriOutput <- renderPrint({
"Invalid input. Please enter support and confidence values between 0.001 and 1."
})
} else {
Data_association <- read.transactions(textConnection(Data_Cleaning2$items) , sep=",")
Data_apriori<- apriori( Data_association , parameter = list( supp= support , conf= confidence , minlen=2 ) )
if(length(Data_apriori) == 0){
output$aprioriOutput <- renderPrint({
"NO association rules found. "
})
}else if(length(Data_apriori)!= 0 ){
output$aprioriOutput <- renderPrint({
inspect(Data_apriori)
})
}
}
})
cleaned_data <- reactive({
req(input$file)
Data <- read.csv(input$file$datapath)
Data_Cleaning1 <- distinct(Data)
outlier_indices <- boxplot(Data_Cleaning1$count)$out
Data_Cleaning2 <- Data_Cleaning1[!Data_Cleaning1$count %in% outlier_indices, ]
Data_Cleaning2
})
output$cleaned_summary <- renderPrint({
summary(cleaned_data())
})
output$boxplots <- renderPlot({
boxplot(cleaned_data()[2:4])
})
output$plot <- renderPlot({
plot_type <- input$plotType
if (plot_type == "Comparing cash and credit totals") {
x <- table(cleaned_data()$paymentType)
percentage <- paste0(round((x / sum(x)) * 100, 2), "%")
pie(x, main = "Cash vs Credit", labels = percentage, col = c("pink", "lightblue"))
legend("bottomright", legend = c("Cash", "Credit"), fill = c("pink", "lightblue"))
} else if (plot_type == "Comparing each age and sum of total spending") {
total_spending_by_age <- cleaned_data() %>%
group_by(age) %>%
summarise(totalA = sum(total)) %>%
arrange(desc(totalA))
barplot(
height = total_spending_by_age$totalA,
names.arg = total_spending_by_age$age,
col = "skyblue",
main = "Total spending vs Ages",
xlab = "Age",
ylab = "Total Spending"
)
} else if (plot_type == "Show Total city spending") {
total_spending_by_city <- cleaned_data() %>%
group_by(city) %>%
summarise(totalC = sum(total)) %>%
arrange(desc(totalC))
plot(reorder(total_spending_by_city$city, -total_spending_by_city$totalC),
total_spending_by_city$totalC,
xlab = "City",
ylab = "Spending",
main = "Total spending for each city")
} else if (plot_type == "The distribution of total spending") {
boxplot(cleaned_data()$total, main = "The distribution of total spending", xlab = "Total spending")
} else if (plot_type == "Dashboard") {
par(mfrow=c(2,2))
install.packages("tidyverse")
library(ggplot2)
x <- table(cleaned_data()$paymentType)
percentage <- paste0(round((x / sum(x)) * 100, 2), "%")
pie(x ,main="Cash vs Credit",labels=percentage,col=c("pink","lightblue"))
legend("bottomright", legend = c("Cash", "Credit"), fill = c("pink","lightblue"))
total_spending_by_age <- cleaned_data() %>%
group_by(age) %>%
summarise(totalA = sum(total)) %>%
arrange(desc(totalA))
barplot(
height = total_spending_by_age$totalA,
names.arg = total_spending_by_age$age,
col = "skyblue",
main = "Total spending vs Ages",
xlab = "Age",
ylab = "Total Spending"
)
total_spending_by_city <- cleaned_data() %>%
group_by(city) %>%
summarise(totalC = sum(total)) %>%
arrange(desc(totalC))
plot(reorder(total_spending_by_city$city, -total_spending_by_city$totalC),
total_spending_by_city$totalC,
xlab = "City",
ylab = "Spending",
main = "Total spending for each city")
boxplot(cleaned_data()$total, main="The distribution of total spending", xlab="Total spending")
}
})
clusteredData <- reactive({
req(input$clusterButton)
Data_Scaled <- c(scale(Data_Cleaning2$total), scale(Data_Cleaning2$age))
k <- kmeans(Data_Scaled, centers = input$clusters)
Data_with_clusters <- data.frame(name = Data_Cleaning2$customer,
age = Data_Cleaning2$age,
total = Data_Cleaning2$total,
cluster = k$cluster)
return(Data_with_clusters)
})
output$plot_cluster <- renderPlot({
plot(clusteredData()$total, clusteredData()$age, col = clusteredData()$cluster, pch = 19, main = "Data Clustering")
points(clusteredData()$total, clusteredData()$age, col = clusteredData()$cluster, pch = 19)
legend("topright", legend = paste("Cluster", unique(clusteredData()$cluster)), col = unique(clusteredData()$cluster), pch = 19)
})
output$table_cluster <- renderDataTable({
clusteredData()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library("readxl")
library(reader)
library("arules")
library(tidyverse)
library(dplyr)
library(ggplot2)
ui <- fluidPage(
titlePanel("Data science project - Team 79"),
tabsetPanel(
tabPanel("Data Cleaning",
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
verbatimTextOutput("cleaned_summary")
),
mainPanel(
plotOutput("boxplots")
)
)
),
tabPanel("Visualization",
sidebarLayout(
sidebarPanel(
selectInput("plotType", "Select Plot Type",
choices = c("Comparing cash and credit totals",
"Comparing each age and sum of total spending",
"Show Total city spending",
"The distribution of total spending",
"Dashboard"))
),
mainPanel(
plotOutput("plot")
)
)
),
tabPanel("Data Clustering Visualization",
sidebarLayout(
sidebarPanel(
sliderInput("clusters", "Number of clusters:", min = 2, max = 4, value = 2),
br(),
actionButton("clusterButton", "Cluster Data")
),
mainPanel(
plotOutput("plot_cluster"),
dataTableOutput("table_cluster")
)
)
),
tabPanel("Association Rule Mining",
sidebarLayout(
sidebarPanel(
textInput("support", "Enter the support value (between 0.001 and 1):", ""),
textInput("confidence", "Enter the confidence value (between 0.001 and 1):", ""),
actionButton("runButton", "Run Apriori")
),
mainPanel(
verbatimTextOutput("aprioriOutput")
)
)
)
)
)
server <- function(input, output) {
observeEvent(input$runButton, {
support <- as.numeric(input$support)
confidence <- as.numeric(input$confidence)
if (is.na(support) || support < 0.001 || support > 1 || is.na(confidence) || confidence < 0.001 || confidence > 1) {
output$aprioriOutput <- renderPrint({
"Invalid input. Please enter support and confidence values between 0.001 and 1."
})
} else {
Data_association <- read.transactions(textConnection(Data_Cleaning2$items) , sep=",")
Data_apriori<- apriori( Data_association , parameter = list( supp= support , conf= confidence , minlen=2 ) )
if(length(Data_apriori) == 0){
output$aprioriOutput <- renderPrint({
"NO association rules found. "
})
}else if(length(Data_apriori)!= 0 ){
output$aprioriOutput <- renderPrint({
inspect(Data_apriori)
})
}
}
})
cleaned_data <- reactive({
req(input$file)
Data <- read.csv(input$file$datapath)
Data_Cleaning1 <- distinct(Data)
outlier_indices <- boxplot(Data_Cleaning1$count)$out
Data_Cleaning2 <- Data_Cleaning1[!Data_Cleaning1$count %in% outlier_indices, ]
Data_Cleaning2
})
output$cleaned_summary <- renderPrint({
summary(cleaned_data())
})
output$boxplots <- renderPlot({
boxplot(cleaned_data()[2:4])
})
output$plot <- renderPlot({
plot_type <- input$plotType
if (plot_type == "Comparing cash and credit totals") {
x <- table(cleaned_data()$paymentType)
percentage <- paste0(round((x / sum(x)) * 100, 2), "%")
pie(x, main = "Cash vs Credit", labels = percentage, col = c("pink", "lightblue"))
legend("bottomright", legend = c("Cash", "Credit"), fill = c("pink", "lightblue"))
} else if (plot_type == "Comparing each age and sum of total spending") {
total_spending_by_age <- cleaned_data() %>%
group_by(age) %>%
summarise(totalA = sum(total)) %>%
arrange(desc(totalA))
barplot(
height = total_spending_by_age$totalA,
names.arg = total_spending_by_age$age,
col = "skyblue",
main = "Total spending vs Ages",
xlab = "Age",
ylab = "Total Spending"
)
} else if (plot_type == "Show Total city spending") {
total_spending_by_city <- cleaned_data() %>%
group_by(city) %>%
summarise(totalC = sum(total)) %>%
arrange(desc(totalC))
plot(reorder(total_spending_by_city$city, -total_spending_by_city$totalC),
total_spending_by_city$totalC,
xlab = "City",
ylab = "Spending",
main = "Total spending for each city")
} else if (plot_type == "The distribution of total spending") {
boxplot(cleaned_data()$total, main = "The distribution of total spending", xlab = "Total spending")
} else if (plot_type == "Dashboard") {
par(mfrow=c(2,2))
install.packages("tidyverse")
library(ggplot2)
x <- table(cleaned_data()$paymentType)
percentage <- paste0(round((x / sum(x)) * 100, 2), "%")
pie(x ,main="Cash vs Credit",labels=percentage,col=c("pink","lightblue"))
legend("bottomright", legend = c("Cash", "Credit"), fill = c("pink","lightblue"))
total_spending_by_age <- cleaned_data() %>%
group_by(age) %>%
summarise(totalA = sum(total)) %>%
arrange(desc(totalA))
barplot(
height = total_spending_by_age$totalA,
names.arg = total_spending_by_age$age,
col = "skyblue",
main = "Total spending vs Ages",
xlab = "Age",
ylab = "Total Spending"
)
total_spending_by_city <- cleaned_data() %>%
group_by(city) %>%
summarise(totalC = sum(total)) %>%
arrange(desc(totalC))
plot(reorder(total_spending_by_city$city, -total_spending_by_city$totalC),
total_spending_by_city$totalC,
xlab = "City",
ylab = "Spending",
main = "Total spending for each city")
boxplot(cleaned_data()$total, main="The distribution of total spending", xlab="Total spending")
}
})
clusteredData <- reactive({
req(input$clusterButton)
Data_Scaled <- c(scale(Data_Cleaning2$total), scale(Data_Cleaning2$age))
k <- kmeans(Data_Scaled, centers = input$clusters)
Data_with_clusters <- data.frame(name = Data_Cleaning2$customer,
age = Data_Cleaning2$age,
total = Data_Cleaning2$total,
cluster = k$cluster)
return(Data_with_clusters)
})
output$plot_cluster <- renderPlot({
plot(clusteredData()$total, clusteredData()$age, col = clusteredData()$cluster, pch = 19, main = "Data Clustering")
points(clusteredData()$total, clusteredData()$age, col = clusteredData()$cluster, pch = 19)
legend("topright", legend = paste("Cluster", unique(clusteredData()$cluster)), col = unique(clusteredData()$cluster), pch = 19)
})
output$table_cluster <- renderDataTable({
clusteredData()
})
}
shinyApp(ui = ui, server = server)
